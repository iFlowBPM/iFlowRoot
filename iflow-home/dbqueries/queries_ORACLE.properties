# ORACLE QUERIES

EmailManager.EMAILS_NO_LIMIT=SELECT eid from email where (enext_send is NULL or enext_send < SYSDATE) order by eid asc
EmailManager.EMAILS_LIMIT=SELECT eid from email where (enext_send is NULL or enext_send < SYSDATE) and rownum < {0} order by eid asc
EmailManager.EMAIL_DATA=SELECT eserver,eport,efrom,eto,ecc,esubject,ebody,ehtml,ecreated,etries,enext_send,elast_send,etls,eauth,euser,epass from email where eid={0}
EmailManager.DELETE_EMAIL=DELETE from email where eid={0}
EmailManager.INSERT_DIRTY_EMAIL=insert into dirty_email (eid,eserver,eport,efrom,eto,ecc,esubject,ebody,ehtml,ecreated,etries,enext_send,elast_send,etls,eauth,euser,epass) select eid,eserver,eport,efrom,eto,ecc,esubject,ebody,ehtml,ecreated,etries,enext_send,elast_send,etls,eauth,euser,epass from email where eid={0}
EmailManager.UPDATE_EMAIL_TRIES=update email set etries=?, elast_send=?, enext_send=? where eid=?
EmailManager.INSERT_EMAIL=INSERT into email (eid,eserver,eport,efrom,eto,ecc,esubject,ebody,ehtml,ecreated,etries,enext_send,elast_send,etls,eauth,euser,epass) values (seq_email.nextval,?,?,?,?,?,?,?,?,SYSDATE,?,NULL,NULL,?,?,?,?)

FlowHolder.SAVE_SUBFLOW_EXPANSION=insert into subflow_block_mapping (id,created,flowname, sub_flowname, original_blockid, mapped_blockid) values(SEQ_SFLOW_MAPPING.nextval,?,?,?,?,?)
FlowHolder.INSERT_FLOW=insert into flow (flowid,flowname,flowfile,enabled,created,organizationid,flowdata,flowversion,modified,type_code) values (seq_flow.nextval,?,?,0,?,?,?,0,?,'W')
FlowHolder.COPY_FLOW_TEMPLATE=insert into flow (flowid,flowname,flowfile,enabled,created,organizationid,flowdata,flowversion,modified,type_code) (select seq_flow.nextval,description,name,0,?,?,data,1,?,'W' FROM flow_template where name=?)
FlowHolder.INSERT_SUBFLOW=insert into sub_flow (flowid,flowname,flowfile,created,organizationid,flowdata,flowversion,modified) values (seq_sub_flow.nextval,?,?,?,?,?,0,?)
FlowHolder.COPY_FLOW_TO_HISTORY=insert into flow_history (id,flowid,name,description,data,flowversion,modified,"COMMENT",max_block_id) select seq_flow_history.nextval,flowid,flowfile,flowname,flowdata,flowversion,modified,? as "COMMENT",max_block_id from flow where flowid=?
FlowHolder.COPY_SUB_FLOW_TO_HISTORY=insert into sub_flow_history (id,flowid,name,description,data,flowversion,modified,"COMMENT") select seq_sub_flow_history.nextval,flowid,flowfile,flowname,flowdata,flowversion,modified,? as "COMMENT" from sub_flow where flowid=?
FlowHolder.FLOW_COMMENT=select h."comment" from {0}flow f, {0}flow_history h where f.flowfile=? and f.organizationid=? and f.flowid=h.flowid and h.flowversion=?
#FlowHolder.DUPLICATE_SYS_SUBFLOW=insert into sub_flow (flowid,flowname,flowfile,created,organizationid,flowdata,flowversion,modified) (select seq_sub_flow.nextval,description,name,SYSDATE,?,data,1,SYSDATE FROM sub_flow_template where name=?)
Flow.update=update flow_state set state={0},mdate=SYSDATE,result=''{1}'',exit_flag={2},mid={6} where flowid={3} and pid={4} and subpid={5}
Flow.insert_state=insert into flow_state (flowid,pid,subpid,state,result,mdate,exit_flag,mid) values ({0},{1},{2},{3},''{4}'',SYSDATE,{5},{6})
Flow.insert_state_history=insert into flow_state_history (flowid,pid,subpid,state,result,mdate,exit_flag,mid,exit_port) values ({0},{1},{2},{3},''{4}'',SYSDATE,{5},{6},{7})
Flow.update_state=update flow_state set state={0},mdate=SYSDATE,result=''{1}'' where flowid={2} and pid={3}
Flow.undo_get_state_result=select distinct result from flow_state_history where flowid={0} and pid={1} and subpid={2} and exit_flag=0 and state={3} and mid <= {4}
Flow.update_state_undo=update flow_state set result=''{4}'', mdate=SYSDATE, state={3}, mid={5} where flowid={0} and pid={1} and subpid={2}
Flow.delete_flow_state_history=delete from flow_state_history where mdate < ? 
Flow.delete_flow_state_log=delete from flow_state_log where log_id in (select log_id from log where creation_date < ?)
Flow.delete_log=delete from log where creation_date < ?

NewFeaturesManager.insert=insert into new_features (newfeaturesid, version, feature,description, created) values (seq_new_features.nextval,?,?,?,?)
NewFeaturesManager.update=update new_features set version=?, feature=?, description=?, created=? where newfeaturesid=?

ProcessManager.insert_state=insert into flow_state (flowid,pid,subpid,state,result,mdate,exit_flag) values ({0},{1},{2},{3},''{4}'',SYSDATE,0)
ProcessManager.update_activity=update activity set userid=''{0}'', profilename=''{0}'', created=SYSDATE, archived=null where userid=''{1}'' and flowid={2} and pid={3}
ProcessManager.update_activity_users=update activity set archived=SYSDATE where userid in ({0}) and flowid={1} and pid={2} and subpid={3}
ProcessManager.insert_forward_activity=insert into activity (userid,flowid,pid,subpid,type,priority,created,started,archived,description,url,status,notify,delegated,profilename,read_flag,mid) values (?,?,?,?,0,0,?,?,NULL,?,?,0,?,?,?,?,?)
ProcessManager.get_process_data=select x.flowid,x.procdata,x.closed from process x where {0}
ProcessManager.undo_process_data=select procdata,procdatazip from process_history where flowid={0} and pid={1} and subpid={2} and undoflag=0 and mid=(select max(mid) from process_history where flowid={0} and pid={1} and subpid={2} and undoflag=0 and mid<={3} and (procdata is not null or procdatazip is not null))
ProcessManager.get_performance=select profilename, avg((archived - created)*86400) from activity_history where archived is not null and undoflag=0 and created > ? and archived < ?{0} group by profilename having avg(archived-created) > 0
ProcessManager.get_activity_filters_user=select * from ( select a.flowid, a.pid, a.mid, a.subpid, a.type, a.priority, a.created, a.started, a.archived, a.description, a.url, a.status, a.notify, a.profilename, a.read_flag, a.delegated, a.folderid, p.pnumber, case when pai2.flowid is not null and pai2.id = 1 then l.id   when pai.flowid is not null then 2   when pai2.flowid is not null then l.id   when pai1.flowid is not null then 100000   else 100000   end as iconid, case   when pai2.flowid is not null and pai2.id = 1 then  l.icon   when pai.flowid is not null then ''label_clock.png''   when pai2.flowid is not null then l.icon   when pai1.flowid is not null then ''label_comment_blue.png''   else null   end as icon from activity a,process p left join deadline pai on pai.flowid = p.flowid and pai.pid = p.pid and pai.subpid = p.subpid left join comment pai1 on pai1.flowid = p.flowid and pai1.pid = p.pid and pai1.subpid = p.subpid left join process_label pai2 on pai2.flowid = p.flowid and pai2.pid = p.pid and pai2.subpid = p.subpid left join label l on l.id = pai2.labelid where p.flowid=a.flowid and p.pid=a.pid and p.subpid=a.subpid and status=0 and a.userid=''{0}'' group by a.flowid, a.pid, a.mid, a.subpid, a.type, a.priority, a.created, a.started, a.archived, a.description, a.url, a.status, a.notify, a.profilename, a.read_flag, a.delegated, a.folderid, p.pnumber ) a where 1=1 
ProcessManager.get_activity_filters_delegated=select a.flowid , a.pid, a.mid, a.subpid, a.type, a.priority, a.created, a.started, a.archived, a.description, a.url, a.status, a.notify, a.profilename, a.read_flag, 1 as delegated, -1 as folderid, p.pnumber, case when PAI.iconid is null then 100000 else PAI.iconid end as iconid, PAI.icon from activity_delegated a,process p LEFT JOIN process_annotation_icon PAI ON (p.flowid=PAI.flowid AND p.pid=PAI.pid AND p.subpid=PAI.subpid) where p.flowid=a.flowid and p.pid=a.pid and p.subpid=a.subpid and status=0 and userid=''{0}''


EventManager.GET_UNPROCESSED_EVENTS=SELECT * FROM event_data WHERE processed = 0
EventManager.GET_FLOW_STATE=SELECT state FROM flow_state WHERE flowid={0} AND pid={1} and subpid={2} and closed=0
EventManager.MARK_EVENT=UPDATE event_data SET processed={1} WHERE eventid={0}
EventManager.REMOVE_BLOCK_EVENTS=DELETE FROM event_data WHERE FID={0} AND PID={1} and subpid={2} AND BLOCKID={3}
EventManager.REMOVE_EVENT=DELETE FROM event_data WHERE eventid={0}
EventManager.GET_BLOCK_EVENT=select eventid from event_data where fid={0} and pid={1} and subpid={2} and blockid={3} and type=''{4}''
EventManager.CREATE_EVENT=INSERT INTO event_data (EVENTID,FID,PID,SUBPID,BLOCKID,STARTTIME,TYPE,PROPERTIES,PROCESSED,USERID) VALUES (seq_event_data.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?)


QueueManager.GET_QUEUE_PROC_IN=select * from queue_proc where ID in ({0}) order by ID
QueueManager.GET_QUEUE_DATA_IN=select * from queue_data where QUEUE_PROC_ID in ({0}) order by QUEUE_PROC_ID
QueueManager.GET_QUEUE_PROC_IDS=select ID from queue_proc {0}
QueueManager.GET_QUEUE_DATA_IDS=select distinct QUEUE_PROC_ID from queue_data {0}
QueueManager.INSERT_QUEUE_PROC=insert into QUEUE_PROC (ID,OBJECT,GROUPID,FLOWID,PID,PROPERTIES,CREATION_DATE) values (seq_queue_proc.nextval,?,?,?,?,?,?)
QueueManager.INSERT_QUEUE_DATA=insert into QUEUE_DATA (QUEUE_PROC_ID,NAME,VALUE) values (?,?,?)
QueueManager.UPDATE_QUEUE_PROPERTIES=update queue_proc set PROPERTIES=? where ID=?
QueueManager.DELETE_QUEUE_DATA=delete from queue_data where QUEUE_PROC_ID={0}

ProfilesSyncManager.INSERT_PROFILE=INSERT INTO profiles (profileid,name, description,organizationid) VALUES (SEQ_PROFILES.NEXTVAL,''{0}'', ''{1}'', ''{2}'')

UsersSyncManager.INSERT_USER=insert into users (userid,unitid,username,email_address,gender,first_name,last_name,phone_number,fax_number,mobile_number,company_phone,department,employee_number,manager,title,orgadm,orgadm_users,orgadm_flows,orgadm_processes,orgadm_resources,orgadm_org,activated,userpassword,password_reset) value (SEQ_USERS.NEXTVAL,{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},1,'''',0)
UsersSyncManager.UPDATE_USER=update users set email_address={1},gender={2},first_name={3},last_name={4},phone_number={5},fax_number={6},mobile_number={7},company_phone={8},department={9},employee_number={10},manager={11},title={12},orgadm={13},orgadm_users={14},orgadm_flows={15},orgadm_processes={16},orgadm_resources={17},orgadm_org={18} where username={0}

DelegationInfoBean.RECEIVED_DELEGATIONS=select a.hierarchyid,a.flowid,a.acceptkey,a.rejectkey,a.ownerid,a.pending,a.expires,a.userid,b.flowname from activity_hierarchy a, flow b where a.flowid=b.flowid and pending=1 and userid=? {0}
DelegationInfoBean.SENT_DELEGATIONS=select a.hierarchyid,a.flowid,a.acceptkey,a.rejectkey,a.ownerid,a.pending,a.expires,a.userid,b.flowname from activity_hierarchy a, flow b where a.flowid=b.flowid and parentid=0 and ownerid=? {0}

DelegationManager.CHECK_TIMEOUT_DELEGATIONS=select * from activity_hierarchy where  expires < ?
DelegationManager.DELEGATION_REQUEST=insert into activity_hierarchy (hierarchyid,parentid,userid,ownerid,flowid,slave,expires,permissions,pending,acceptkey,rejectkey,requested,responded) values (seq_activity_hierarchy.nextval,?,?,?,?,1,?,?,1,?,?,SYSDATE,null)
DelegationManager.SUPER_DELEGATION=insert into activity_hierarchy (hierarchyid,parentid,userid,ownerid,flowid,slave,expires,permissions,pending,acceptkey,rejectkey) values (seq_activity_hierarchy.nextval,?,?,?,?,1,?,?,0,NULL,NULL)


Documents.ADD_DOCUMENT=INSERT INTO documents (docid,filename,datadoc,updated,flowid,pid,subpid) VALUES (seq_documents_id.nextval,?,?,SYSDATE,?,?,?)
Documents.UPDATE_DOCUMENT=UPDATE documents set filename=?,datadoc=?,docurl=?,updated=? WHERE docid=?
Documents.UPDATE_DOCUMENT_INFO=UPDATE documents set filename=?,updated=? WHERE docid=?
Documents.UPDATE_DOCUMENT_DOCURL=UPDATE documents set docurl=? WHERE docid=?
Documents.GET_DOCUMENT=SELECT docid,flowid,pid,subpid,filename,DBMS_LOB.GETLENGTH(datadoc) as length,docurl,updated{0} FROM documents WHERE docid=? {1}
Documents.LIST_DOCUMENTS=SELECT docid,flowid,pid,subpid,filename,DBMS_LOB.GETLENGTH(datadoc) as length,docurl,updated FROM documents
Documents.REMOVE_DOCUMENT=DELETE FROM documents WHERE docid=?


ErrorManager.INSERT_ERROR=insert into iflow_errors (errorid,userid,created,flowid,pid,subpid,errortype,description) values (seq_iflow_errors.nextval,?,?,?,?,?,?,?)

DBUserDataAccess.SQL_GET_USERS=select a.*,b.NAME as UNITNAME,c.NAME as ORGNAME,c.ORGANIZATIONID as ORG_ID,a.FIRST_NAME || '' '' || a.LAST_NAME as FULL_NAME from users a,organizational_units b,organizations c where a.unitid=b.unitid and b.ORGANIZATIONID=c.ORGANIZATIONID and b.ORGANIZATIONID=''{0}''
DBUserDataAccess.SQL_GET_USER_DATA=select a.*,b.NAME as UNITNAME,c.NAME as ORGNAME,c.ORGANIZATIONID as ORG_ID,a.FIRST_NAME || '' '' || a.LAST_NAME as FULL_NAME from users a,organizational_units b,organizations c where a.unitid=b.unitid and b.ORGANIZATIONID=c.ORGANIZATIONID and a.username=''{0}''
DBSystemUserDataAccess.SQL_GET_USER_DATA=select a.*,''NONE'' as UNITNAME,c.NAME as ORGNAME,c.ORGANIZATIONID as ORG_ID,a.FIRST_NAME || '' '' || a.LAST_NAME as FULL_NAME from system_users a,organizations c where c.ORGANIZATIONID={0} and a.username=''{1}''
DBUserDataAccess.SQL_GET_USER_DATA_BY_FIELD=select a.*,b.NAME as UNITNAME,c.NAME as ORGNAME,c.ORGANIZATIONID as ORG_ID,a.FIRST_NAME || '' '' || a.LAST_NAME as FULL_NAME from users a,organizational_units b,organizations c where a.unitid=b.unitid and b.ORGANIZATIONID=c.ORGANIZATIONID and a.{0}=''{0}''

FlowMenus.INSERT=insert into links_flows (linkid,parentid,flowid,name,url,organizationid)  values ( seq_links_flows.nextval, ?, ?, ?, ?, ?)

FlowSettings.getNextMid=select seq_flow_settings.nextval as mid from dual
FlowSettings.UPDATEFLOWSETTING=call updateFlowSetting(?, ?, ?, ?, ?, ?, ?)

Notification.CREATE_MESSAGE=insert into notifications (id,created,sender,message,link) values (seq_notifications.nextval,?,?,?,?)

# reindex processes
# {0}=flowid
# {1}=index num
# {2}=var name
# {3}=data table
FlowHolder.REINDEX=update process p set (idx{1}) = (select i{1}.value from {3} i{1} where i{1}.pid=p.pid and p.flowid={0} and i{1}.name=''{2}'')
FlowHolder.REINDEX_HISTORY=update process_history p set (idx{1}) = (select i{1}.value from {3}_history i{1} where i{1}.pid=p.pid and p.closed=1 and p.flowid={0} and i{1}.name=''{2}'')
FlowHolder.LIST_FLOW_VERSIONS=select h.flowversion,h.modified,h."comment" from {0}flow f, {0}flow_history h where f.flowfile=? and f.organizationid=? and f.flowid=h.flowid order by h.flowversion desc

# format a date/time to insert into DB
SQL.DATETIME=to_date(''{0,date,yyyy/MM/dd HH:mm:ss}'',''yyyy/mm/dd hh24:mi:ss'') 

Series.GET_FOR_UPDATE=select * from series where {0}=? and ({1} is null or {2}=?) for update

Logger.GET_FLOW_STATE_LOG_ID=SELECT SEQ_FLOW_STATE_LOG_ID.NEXTVAL FROM DUAL

# admin order by (users,profiles)
UserManager.GET_USERS_ADMIN=SELECT u.USERID,u.USERNAME,u.EMAIL_ADDRESS,u.FIRST_NAME,u.LAST_NAME,u.PHONE_NUMBER,u.MOBILE_NUMBER from system_users u {0} ORDER BY u.USERID
UserManager.GET_USERS=SELECT u.USERID,u.UNITID,u.USERNAME,u.EMAIL_ADDRESS,u.GENDER,u.FIRST_NAME,u.LAST_NAME,u.PHONE_NUMBER,u.FAX_NUMBER,u.MOBILE_NUMBER,u.COMPANY_PHONE,u.ACTIVATED,u.ORGADM,u.ORGADM_USERS,u.ORGADM_FLOWS,u.ORGADM_PROCESSES,u.PASSWORD_CREATION_DATE,u.ORGADM_RESOURCES,u.ORGADM_ORG {0} from users u, organizations o, organizational_units ou {1} ORDER BY u.USERID
UserManager.GET_PROFILES=SELECT {0}, {1}, {2}, {3} FROM {4} {5} {6} ORDER BY profileid

# update counter
JobManager.GET_NODE_KEY=update counter as t1,(select value from counter where name = {0}) as t2 set t1.value = (t2.value + 1)where t1.name = {1}
JobManager.ADD_BEAT=update active_node set nodekey={0}, expiration= sysdate + ({1}*(1/86400))
JobManager.IS_MY_BEAT_VALID=select (count(*)>0 AND expiration>SYSDATE) as valid from active_node where nodekey={0}
JobManager.IS_BEAT_EXPIRED=select SYSDATE>expiration as expired from active_node

SharedObjectRefresh.SELECT=SELECT id,flowid FROM sharedobjectrefresh
SharedObjectRefresh.INSERT=INSERT INTO sharedobjectrefresh(id, flowid) VALUES(sqe_sorefresh.NEXTVAL, {0})
SharedObjectRefresh.DELETE=DELETE FROM sharedobjectrefresh